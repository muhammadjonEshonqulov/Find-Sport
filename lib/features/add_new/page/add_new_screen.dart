import 'package:easy_localization/easy_localization.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:google_maps_flutter/google_maps_flutter.dart';import '../../../app/app.dart';import '../../../app/router.dart';import '../../../common/repository/network_result.dart';import '../../../common/widgets/appbar.dart';import '../block/add_new_bloc.dart';import '../repository/add_new_repository.dart';class AddNewPageWithRepo extends StatelessWidget {  const AddNewPageWithRepo({super.key});  @override  Widget build(BuildContext context) {    return BlocProvider(      create: (context) => AddNewBloc(context.read<AddNewRepository>()),      child: const AddNewScreen(),    );  }}class AddNewScreen extends StatefulWidget {  const AddNewScreen({super.key});  @override  State<AddNewScreen> createState() => _AddNewScreenState();}class _AddNewScreenState extends State<AddNewScreen> {  final TextEditingController _titleController = TextEditingController();  final TextEditingController _descController = TextEditingController();  GoogleMapController? controller;  late AddNewBloc _addNewBloc;  final _formKey = GlobalKey<FormState>();  @override  void initState() {    _addNewBloc = BlocProvider.of<AddNewBloc>(context);    super.initState();  }  @override  Widget build(BuildContext context) {    return SafeArea(      child: Scaffold(          appBar: PreferredSize(            preferredSize: Size.fromHeight(100.0),            child: CustomAppBar(titleName: "add_new_place".tr()),          ),          backgroundColor: Colors.white,          body: BlocConsumer<AddNewBloc, NetworkResult>(listener: (context, state) {            if (state is Error) {              hideLoading();              snack(context, state.message.toString());            } else if (state is Success) {              hideLoading();              router.go(Routes.choose_language);            } else if (state is Loading) {              showLoading(context);            } else {              hideLoading();              snack(context, state.message.toString());            }          }, builder: (context, state) {            return SingleChildScrollView(              child: Padding(                padding: const EdgeInsets.all(10.0),                child: Form(                  key: _formKey,                  child: Column(                    crossAxisAlignment: CrossAxisAlignment.stretch,                    children: [                      Text(                        "title".tr(),                        textAlign: TextAlign.left,                        style: TextStyle(color: Colors.black, fontSize: 16, fontFamily: 'Mulish', fontWeight: FontWeight.w400),                      ),                      SizedBox(                        height: 6,                      ),                      TextFormField(                          controller: _titleController,                          decoration: customTextFieldDecoration("enter_title".tr()),                          validator: (value) => validateNonEmpty(value ?? "", "enter_title".tr())),                      SizedBox(                        height: 10,                      ),                      Text(                        "description".tr(),                        textAlign: TextAlign.left,                        style: TextStyle(color: Colors.black, fontSize: 18, fontFamily: 'Mulish', fontWeight: FontWeight.w400),                      ),                      SizedBox(                        height: 6,                      ),                      TextFormField(                        textAlignVertical: TextAlignVertical.bottom,                        maxLines: 10,                        controller: _descController,                        decoration: customTextFieldDecoration("enter_description".tr()),                        validator: (value) => validateNonEmpty(value ?? "", "enter_description".tr()),                      ),                      SizedBox(                        height: 30,                      ),                      Row(                        children: [                          Expanded(                            child: Container(                              height: 1,                              color: Colors.black,                            ),                          ),                          Padding(                            padding: const EdgeInsets.symmetric(horizontal: 15.0),                            child: Text(                              'change_location'.tr(),                              style: TextStyle(fontSize: 18),                            ),                          ),                          Expanded(                            child: Container(                              height: 1,                              color: Colors.black,                            ),                          ),                        ],                      ),                      SizedBox(                        height: 10,                      ),                      Text(                        "address_by_location".tr(),                        textAlign: TextAlign.left,                        style: TextStyle(color: Colors.black, fontSize: 18, fontFamily: 'Mulish', fontWeight: FontWeight.w400),                      ),                      SizedBox(                        height: 6,                      ),                      TextFormField(                        textAlignVertical: TextAlignVertical.bottom,                        controller: _descController,                        decoration: customTextFieldDecoration("enter_map_address".tr()),                        validator: (value) => validateNonEmpty(value ?? "", "enter_map_address".tr()),                      ),                      // Container(                      //     height: 200, child: GoogleMap(                      //   myLocationButtonEnabled: true,                      //   zoomControlsEnabled: true,                      //   initialCameraPosition: CameraPosition(target: LatLng(37.42796133580664, -122.085749655962)),                      //   onMapCreated: (controller) => this.controller = controller,)),                    ],                  ),                ),              ),            );          })),    );  }  String? validateNonEmpty(String? value, String errorMessage) {    if (value == null || value.isEmpty) {      return errorMessage;    }    return null;  }  InputDecoration customTextFieldDecoration(String label) {    return InputDecoration(      alignLabelWithHint: true,      border: OutlineInputBorder(borderRadius: BorderRadius.all(Radius.circular(5.0))),      labelText: label,      errorBorder: OutlineInputBorder(        borderRadius: BorderRadius.all(Radius.circular(5.0)),        borderSide: BorderSide(color: Colors.red),      ),      focusedErrorBorder: OutlineInputBorder(        borderSide: BorderSide(color: Colors.grey),        borderRadius: BorderRadius.all(Radius.circular(5.0)),      ),      enabledBorder: OutlineInputBorder(        borderSide: BorderSide(color: Colors.grey),        borderRadius: BorderRadius.all(Radius.circular(5.0)),      ),      focusedBorder: OutlineInputBorder(        borderSide: BorderSide(color: Colors.blue), // Change to your desired focused border color        borderRadius: BorderRadius.all(Radius.circular(5.0)),      ),      // hintText: "Login",    );  }}