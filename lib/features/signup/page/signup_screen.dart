import 'package:easy_localization/easy_localization.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import '../../../app/app.dart';import '../../../app/router.dart';import '../../../common/repository/network_result.dart';import '../block/signup_bloc.dart';import '../repository/signup_repository.dart';class SignupPageWithRepo extends StatelessWidget {  const SignupPageWithRepo({super.key});  @override  Widget build(BuildContext context) {    return BlocProvider(      create: (context) => SignupBloc(context.read<SignupRepository>()),      child: const SignupScreen(),    );  }}class SignupScreen extends StatefulWidget {  const SignupScreen({super.key});  @override  State<SignupScreen> createState() => _SignupScreenState();}class _SignupScreenState extends State<SignupScreen> {  final TextEditingController _firstNameController = TextEditingController();  final TextEditingController _lastNameController = TextEditingController();  final TextEditingController _phoneController = TextEditingController();  final TextEditingController _passwordController = TextEditingController();  final TextEditingController _rePasswordController = TextEditingController();  // final GlobalKey<ScaffoldMessengerState> scaffoldMessengerKey = GlobalKey<ScaffoldMessengerState>();  bool _isObscure = true;  late SignupBloc _loginBloc;  final _formKey = GlobalKey<FormState>();  @override  void initState() {    _loginBloc = BlocProvider.of<SignupBloc>(context);    super.initState();  }  @override  Widget build(BuildContext context) {    return SafeArea(      child: Scaffold(          backgroundColor: Colors.white,          body: BlocConsumer<SignupBloc, NetworkResult>(listener: (context, state) {            if (state is Error) {              hideLoading();              snack(context, state.message.toString());            } else if (state is Success) {              hideLoading();              router.go(Routes.add_new);            } else if (state is Loading) {              showLoading(context);            } else {              hideLoading();              snack(context, state.message.toString());            }          }, builder: (context, state) {            return SingleChildScrollView(              child: Padding(                padding: const EdgeInsets.all(10.0),                child: Form(                  key: _formKey,                  child: Column(                    crossAxisAlignment: CrossAxisAlignment.stretch,                    children: [                      Center(child: Container(height: 250, width: 250, child: Image.asset("assets/images/ic_signup.png"))),                      Center(child: Text("signup".tr(), style: const TextStyle(fontFamily: "Mulish", fontWeight: FontWeight.w700, fontSize: 20))),                      Text(                        "first_name".tr(),                        textAlign: TextAlign.left,                        style: TextStyle(color: Colors.black, fontSize: 18, fontFamily: 'Mulish', fontWeight: FontWeight.w400),                      ),                      SizedBox(                        height: 6,                      ),                      TextFormField(                          controller: _firstNameController,                          decoration: customTextFieldDecoration("enter_first_name".tr()),                          validator: (value) => validateNonEmpty(value ?? "", "enter_first_name".tr())),                      SizedBox(                        height: 10,                      ),                      Text(                        "last_name".tr(),                        textAlign: TextAlign.left,                        style: TextStyle(color: Colors.black, fontSize: 18, fontFamily: 'Mulish', fontWeight: FontWeight.w400),                      ),                      SizedBox(                        height: 6,                      ),                      TextFormField(                        controller: _lastNameController,                        decoration: customTextFieldDecoration("enter_last_name".tr()),                        validator: (value) => validateNonEmpty(value ?? "", "enter_last_name".tr()),                      ),                      SizedBox(                        height: 10,                      ),                      Text(                        "phone_number".tr(),                        textAlign: TextAlign.left,                        style: TextStyle(color: Colors.black, fontSize: 18, fontFamily: 'Mulish', fontWeight: FontWeight.w400),                      ),                      SizedBox(                        height: 6,                      ),                      TextFormField(                        controller: _phoneController,                        decoration: customTextFieldDecoration("enter_last_name".tr()),                        validator: (value) => validateNonEmpty(value ?? "", "enter_phone_number".tr()),                      ),                      SizedBox(                        height: 10,                      ),                      Text(                        "password".tr(),                        textAlign: TextAlign.left,                        style: TextStyle(color: Colors.black, fontSize: 18, fontFamily: 'Mulish', fontWeight: FontWeight.w400),                      ),                      SizedBox(                        height: 6,                      ),                      TextFormField(                        controller: _passwordController,                        obscureText: _isObscure,                        decoration: customTextFieldDecoration("enter_password".tr()),                        validator: (value) => validateNonEmpty(value ?? "", "enter_password".tr()),                      ),                      SizedBox(                        height: 10,                      ),                      Text(                        "confirm_password".tr(),                        textAlign: TextAlign.left,                        style: TextStyle(color: Colors.black, fontSize: 18, fontFamily: 'Mulish', fontWeight: FontWeight.w400),                      ),                      SizedBox(                        height: 6,                      ),                      TextFormField(                        controller: _rePasswordController,                        obscureText: _isObscure,                        decoration: customTextFieldDecoration("enter_confirm_password".tr()),                        validator: (value) => validateNonEmpty(value ?? "", "enter_confirm_password".tr()),                      ),                      SizedBox(                        height: 30,                      ),                      Center(                          child: Container(                        width: double.infinity,                        height: 40,                        child: ElevatedButton(                            style: ButtonStyle(                              backgroundColor: MaterialStateProperty.all(const Color(0xff3E67B7)),                            ),                            onPressed: () {                              _formKey.currentState!.validate();                              if (_firstNameController.text.isNotEmpty &&                                  _lastNameController.text.isNotEmpty &&                                  _phoneController.text.isNotEmpty &&                                  _passwordController.text.isNotEmpty &&                                  _rePasswordController.text.isNotEmpty) {                                if (_passwordController.text == _rePasswordController.text) {                                  _loginBloc.add(SignupEventData(firstname: _firstNameController.text, lastname: _lastNameController.text, phone: _phoneController.text, password: _passwordController.text));                                } else {                                  snack(context, "passwords_do_not_match".tr());                                }                              } else {}                            },                            child: Text("save".tr(), style: const TextStyle(fontFamily: "Mulish", fontWeight: FontWeight.w500, fontSize: 16))),                      ))                    ],                  ),                ),              ),            );          })),    );  }  String? validateNonEmpty(String? value, String errorMessage) {    if (value == null || value.isEmpty) {      return errorMessage;    }    return null;  }  InputDecoration customTextFieldDecoration(String label) {    return InputDecoration(      border: OutlineInputBorder(borderRadius: BorderRadius.all(Radius.circular(5.0))),      labelText: label,      errorBorder: OutlineInputBorder(        borderRadius: BorderRadius.all(Radius.circular(5.0)),        borderSide: BorderSide(color: Colors.red),      ),      focusedErrorBorder: OutlineInputBorder(        borderSide: BorderSide(color: Colors.grey),        borderRadius: BorderRadius.all(Radius.circular(5.0)),      ),      enabledBorder: OutlineInputBorder(        borderSide: BorderSide(color: Colors.grey),        borderRadius: BorderRadius.all(Radius.circular(5.0)),      ),      focusedBorder: OutlineInputBorder(        borderSide: BorderSide(color: Colors.blue), // Change to your desired focused border color        borderRadius: BorderRadius.all(Radius.circular(5.0)),      ),      // hintText: "Login",    );  }}